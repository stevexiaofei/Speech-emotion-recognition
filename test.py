from model import *
trng = RandomStreams(SEED)
rng = np.random.RandomState(1234)
use_noise = theano.shared(numpy_floatX(0.))
x = T.tensor3('x', dtype=config.floatX)
mask = T.matrix('mask',dtype=config.floatX)
y = T.vector('y',dtype='int32')
lr=T.scalar('lr')
params=net_params()
################   build model ##########################
L1=HiddenLayer(rng,x,64,32)
	#model_params=L1.params.copy()
params.add(L1)
L6=conv_layer(rng,L1.output,filters_shape=(32,1,11,32),input_shape=(None,1,None,32))
mask_conv=L6.get_mask(mask)
params.add(L6)
L5=dropout_layer(L6.output,use_noise,trng)
L2=lstm(rng,L5.output,mask_conv,32,32,mean_pool=True)
L7=lstm(rng,L5.output,mask_conv,32,32,mean_pool=True,go_backwards=True)
	#model_params.update(L2.params)
params.add(L2)
params.add(L7)
LSTM_out=T.concatenate([L2.mean_pool_out,L7.mean_pool_out],axis=1)
L3=dropout_layer(LSTM_out,use_noise,trng)
print(L3.output.shape)
L4=LogisticRegression(L3.output,rng,64,4)
a=np.ones(shape=(34,23,64),dtype=np.float32)
b=np.ones(shape=(34,23),dtype=np.float32)
y=np.ones(shape=(23),dtype=np.int32)
f_lstm_out=theano.function([x,mask],LSTM_out)
f_lstm_out(a,b).shape
cost=L4.negative_log_likelihood(y)
f_cost=theano.function([x,mask,y],cost)
f_cost(a,b)
params.add(L4)